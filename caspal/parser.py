# -*- coding: utf-8 -*-

from .token import Token, TokenType
from .ast import *              # noqa


class Parser(object):
    """Parser for Caspal.

    Parses a token generated by the Lexer and converts it into
    an AST(Abstract Syntax Tree).

    """

    def __init__(self, lexer):
        self.lexer = lexer
        self.current_token = self.lexer.get_next_token()

    def advance(self):
        self.current_token = self.lexer.get_next_token()

    def number(self):
        """Parses a number

        Note: Can only parse an integer for now.
        """
        res = ''
        token = self.current_token

        while token is not None and token.type == TokenType.NUMBER:
            res = res + token.value
            self.advance()
            token = self.current_token

        return Number(int(res))

    def term(self):
        token = self.current_token

        if token.type == TokenType.LPAREN:
            self.advance()
            res = self.expression()
            if self.current_token.type == TokenType.RPAREN:
                self.advance()
                return res
        else:
            return self.number()

    def factor(self):
        res = self.term()
        op = self.current_token

        while op.type in (TokenType.MULT, TokenType.DIV):
            self.advance()
            res1 = self.term()

            if op.type in (TokenType.MULT, TokenType.DIV):
                res = BinOp(op=op.value, left=res, right=res1)

            op = self.current_token

        return res

    def expression(self):
        """Parses an arithmetic expression"""
        res = self.factor()
        op = self.current_token

        while op.type in (TokenType.PLUS, TokenType.MINUS):
            self.advance()
            res1 = self.factor()

            if op.type in (TokenType.PLUS, TokenType.MINUS):
                res = BinOp(op=op.value, left=res, right=res1)

            op = self.current_token

        return res

    def parse(self):
        return self.expression()
